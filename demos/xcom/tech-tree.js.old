function Technology(name, depends, items, level, owned) {
    this.name = name;
    this.depends = depends;
    this.items = items;
    this.level = level;
    this.owned = owned;

	this.x = null;
	this.y = null;

    this.node = null;
    this.hover = null;
    this.arcs = new Array();
}

Technology.prototype.toString = function TechnologyToString() {
    return "[Technology: " + this.name + ", level: " + this.level.toString() + ", owned: " + this.owned.toString() + "]";
}

function HighlightRequiredTechnologies(source, technologies, select) {
  var node_thickness;
  var arc_thickness;
  var node_colour;
  var arc_colour;

  if(select) {
    node_thickness = 5;
    arc_thickness = 5;
    node_colour = 'red';
    arc_colour = 'red';
  } else {
    node_thickness = 3;
    arc_thickness = 3;
    node_colour = 'black';
    arc_colour = 'black';
  }

  var required_technologies = [source];
  var technologies_stack = [source];

  while(technologies_stack.length != 0) {
    for(dep in technologies[technologies_stack[0]].depends) {
      var target = technologies[technologies_stack[0]].depends[dep];
      if(!technologies[target].owned && required_technologies.indexOf(technologies[target]) < 0) {
        required_technologies.push(target);
        technologies_stack.push(target);
      }
    }
    technologies_stack.splice(0, 1);
  }

  for(tech in required_technologies) {
    technologies[required_technologies[tech]].node.attr({ 'stroke': node_colour,
                                                          'stroke-width': node_thickness });
    for(arc in technologies[required_technologies[tech]].arcs) {
      if(required_technologies.indexOf(arc) >= 0) {
        technologies[required_technologies[tech]].arcs[arc].attr({ 'stroke': arc_colour,
                                                                   'stroke-width': arc_thickness });
      }
    }
  }
}

function InitTechnologies() {
  var box_width = 250;
  var box_height = 50;
  var box_space_x = 50;
  var box_space_y = 20; // Also in DrawCanvas()

  // Define tech tree
  var technologies = new Array();
  technologies["Start"] = new Technology("Start", [], ["Med kit", "LMG", "Tactical Vest"], 0, true);
  technologies["Xenobiology"] = new Technology("Xenobiology", ["Start"], ["Targeting Module"], 1, false);
  technologies["Alien Materials"] = new Technology("Alien Materials", ["Start"], ["Allow Plating"], 1, false);
  technologies["Cyberdisk Autopsy"] = new Technology("Cyberdisk Autopsy", ["Xenobiology", "Alien Materials"], ["Autosentry"], 2, false);

  // Validate tech tree
  var valid = true;

  for(var tech in technologies) {
    if(technologies[tech].name != tech) {
      alert("Invalid label for technology " + tech + "/" + technologies[tech].name);
      valid = false;
      break;
    }
    
    for(var dep in technologies[tech].depends) {
      if(technologies[technologies[tech].depends[dep]] == null) {
        alert("Invalid depends for technology " + tech + " (" + technologies[tech].depends[dep] + ")");
        valid = false;
        break;
      }
    }
    if(!valid) {
      break;
    }
  }

  // Set up aux variables for spacing
  var size_array = new Array();
  for(var i=0 ; i<10 ; i++) {
    size_array[i] = 0;
  }

  for(tech in technologies) {
    var level = technologies[tech].level;
	technologies[tech].x = (level * box_width) +
                           ((level + 1) * box_space_x);
    technologies[tech].y = (size_array[level] * box_height) +
                           ((size_array[level] + 1) * box_space_y);

    size_array[level] = size_array[level] + 1;
  }

  return technologies;
}

function ColourNodes(technologies) {
  var node_colour;

  for(var tech in technologies) {
    if(technologies[tech].owned) {
      node_colour = 'green';
    } else {
      var leaf = true;
      for(var dep in technologies[tech].depends) {
        if(!technologies[technologies[tech].depends[dep]].owned) {
          leaf = false;
          break;
        }
      }
      if(leaf) {
        node_colour = 'yellow';
      } else {
        node_colour = 'red';
      }
    }
    technologies[tech].hover.attr({ 'fill': node_colour });
  }
}

function DrawCanvas(paper, technologies) {
  var box_width = 250;
  var box_height = 50;
  var box_space_x = 50;
  var box_space_y = 20; // Also in InitTechnologies()

  var text_init_space_x = 7;
  var text_init_space_y = 15;
  var text_line_space = 10;

  var node_thickness = 3;
  var node_indirect_thickness = 5;
  var node_select_thickness = 7;
  var node_hover_thickness = 10;
  var arc_thickness = 3;
  var arc_select_thickness = 5;
  var arc_hover_thickness = 10;

  // Draw nodes
  for(tech in technologies) {
    technologies[tech].node = paper.rect(technologies[tech].x,
                                         technologies[tech].y,
                                         box_width, box_height)
                                   .attr({ 'stroke-width': node_thickness,
                                           'stroke-linejoin': 'round' });
    paper.text(technologies[tech].x + (box_width / 2),
               technologies[tech].y + text_init_space_y,
               tech)
         .attr({ 'text-anchor': 'middle',
                 'font-family': '"Hind", sans-serif',
                 'font-weight': 700,
                 'font-size': '15px' });
    paper.text(technologies[tech].x + text_init_space_x,
               technologies[tech].y + text_init_space_y + text_line_space,
               tech)
         .attr({ 'text-anchor': 'start',
                 'font-family': '"Hind", sans-serif',
                 'font-weight': 400 });
  }

  // Draw arcs
  for(from in technologies) {
    for(dep in technologies[from].depends) {
      to = technologies[from].depends[dep];
      technologies[from].arcs[to] = paper.path([ 'M', technologies[from].x,
                                                      technologies[from].y + (box_height / 2),
                                                 'L', technologies[to].x + box_width,
                                                      technologies[to].y + (box_height / 2)])
                                         .attr({ 'stroke-width': arc_thickness });
      paper.path([ 'M', technologies[from].x,
                        technologies[from].y + (box_height / 2),
                   'L', technologies[to].x + box_width,
                        technologies[to].y + (box_height / 2)])
           .attr({ 'stroke': 'blue',
                   'stroke-width': arc_hover_thickness,
                   'stroke-opacity': 0.1})
           .hover(
             function () {
               technologies[this[0]].arcs[this[1]].attr({ 'stroke-width': arc_select_thickness });
               technologies[this[0]].node.attr({ 'stroke-width': node_indirect_thickness });
               technologies[this[1]].node.attr({ 'stroke-width': node_indirect_thickness });
             }, function () {
               technologies[this[0]].arcs[this[1]].attr({ 'stroke-width': arc_thickness });
               technologies[this[0]].node.attr({ 'stroke-width': node_thickness });
               technologies[this[1]].node.attr({ 'stroke-width': node_thickness });
             },
             [from, to], [from, to]);
    }
  }

  for(tech in technologies) {
    technologies[tech].hover = paper.rect(technologies[tech].x - (node_hover_thickness / 2),
                                          technologies[tech].y - (node_hover_thickness / 2),
                                          box_width + node_hover_thickness,
                                          box_height + node_hover_thickness);
    technologies[tech].hover.attr({ 'stroke': 'none',
                                    'fill': 'red',
                                    'opacity': 0.1 })
                            .hover(
                              function () {
                                if(technologies[this].owned) {
                                  technologies[this].node.attr({ 'stroke-width': node_select_thickness });
                                } else {
                                  HighlightRequiredTechnologies(this, technologies, true);
                                }
                              }, function () {
                                HighlightRequiredTechnologies(this, technologies, false);
                              },
                              tech, tech)
                            .click(
                              function() {
                                technologies[this.node.id].owned = !technologies[this.node.id].owned;
                                ColourNodes(technologies);
                            });
    technologies[tech].hover.node.id = tech;
  }
  ColourNodes(technologies);
}

// Set up drawing environment
var paper;
var technologies;

window.onload = function() {
  paper = new Raphael(document.getElementById("canvas_container"), 1000, 500);
  technologies = InitTechnologies();
  DrawCanvas(paper, technologies);
}

